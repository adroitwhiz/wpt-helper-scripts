import os
import shutil

possible_extensions = ['', '.html', '.webp', '.htm', '.jpg', '.ico', '.bmp',
  '.gif', '.js', '.png', '.ogv', '.svg']

# ignore ds_store
wpt_canvas_directory = "/Users/aaronhk/chrome/src/third_party/blink/web_tests/external/wpt/html/canvas"
canvas_type_folder = "offscreen"

class TestEntry():
  def __init__(self, test_name, path):
    self.name = test_name
    self.path = path
    self.files = []

def is_autogenerated(file): # see if a test at file is autogenerated
  with(open(file, 'r')) as infile:
    lines = infile.readlines()
    for line in lines:
      if line.find("DO NOT EDIT!") != -1:
        return True
  return False

test_files = []
def collect_non_autogenerated_tests(folder):
  result = []
  folder = os.path.join(wpt_canvas_directory, folder)
  for entry in os.walk(folder):
    dirpath = entry[0]
    if dirpath.find("manual") != -1:
      continue
    files = entry[2]
    for file in files:
      full_path = os.path.join(dirpath, file)
      basename, extension = os.path.splitext(file)
      if extension == '.html' or extension == '.htm': # this is an actual test
        if is_autogenerated(full_path):
          continue
        if file.find("ref.htm") != -1 or file.find("expected.htm") != -1:
          # don't add expectations files
          continue
        new_entry = TestEntry(basename, dirpath)
        for f2 in files: # okay, it's O(n^2) but I DGAF
          basename2, extension2 = os.path.splitext(f2)
          if basename2.find(basename) != -1:
            new_entry.files.append(f2)
        result.append(new_entry)
  return result

tests_to_move = collect_non_autogenerated_tests(canvas_type_folder)
destination_folder = "manual"

def move_tests(tests, folder, parent_folder):
  for test in tests:
    if test.path.find(folder) == -1:
      for file in test.files:
        source_full_path = os.path.join(test.path, file)
        before, after = test.path.split(parent_folder + "/")
        destination_folder = os.path.join(before, parent_folder, folder, after)
        destination_full_path = os.path.join(destination_folder, file)
        if not os.path.exists(destination_folder):
          os.mkdir(destination_folder)
        # print(source_full_path, destination_full_path)
        try:
          shutil.move(source_full_path, destination_full_path)
          # print("{} => {}".format(source_full_path, destination_full_path))
        except Exception as e:
          print("ERROR MOVING {} => {}".format(source_full_path, destination_full_path))
          print(type(e))
          print(e)

move_tests(tests_to_move, destination_folder, canvas_type_folder)
